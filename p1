#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// Struktur til at gemme bydata
typedef struct {
    char navn[50];
    float afstand;       // i km fra Venedig
    char kategori[20];   // Landskab, historisk, bjerge osv.
    char beskrivelse[200]; // Kort beskrivelse af byen
    int budget_low[2];   // Lavt budget [0]: lav sæson, [1]: høj sæson
    int budget_mid[2];   // Mellemklasse budget [0]: lav sæson, [1]: høj sæson
    int budget_high[2];  // Luksus budget [0]: lav sæson, [1]: høj sæson
} By;


// Liste af byer omkring
By byer[] = {
    {"Verona", 95, "historisk", "Romeo & Juliet-historien, kendt amphitheater, Gardasøen tæt på.", {5000, 5500}, {8500, 10500}, {19000, 24000}},
    {"Treviso", 25, "landskab", "Flot landskab, kendt for vin og tiramisu, Prosecco Hills.", {4800, 5000}, {8500, 9500}, {18000, 21000}},
    {"Chioggia", 25, "landskab", "Havneby med seafood og kanaler, kaldet ‘Lille Venice’.", {4500, 5000}, {8000, 9000}, {17000, 19000}},
    {"Asolo", 50, "landskab", "Rolig countryside-by med flot landskab.", {5000, 6000}, {9000, 11000}, {19000, 24000}},
    {"Rovigo", 55, "landskab", "Natur og bird watching i Po-deltaet.", {4500, 5000}, {8000, 9000}, {16000, 19000}},
    {"Belluno", 80, "bjerge", "Tæt på Dolomitterne, perfekt til vandring og skiløb.", {4800, 5500}, {8500, 10500}, {18500, 23000}},
    {"Padova", 30, "historisk", "Universitetsby med flotte kirker og Galileo-historie.", {5000, 5800}, {9000, 10500}, {19000, 24000}},
    {"Monselice", 45, "historisk", "Religiøs by med ‘Seven Churches Pilgrimage Route’.", {4500, 5000}, {8000, 9000}, {16000, 19000}},
    {"Jesolo", 30, "landskab", "Lang sandstrand ‘Lido di Jesolo’ og kendt vandland.", {5000, 6000}, {9000, 11000}, {19500, 25000}},
    {"Bassano del Grappa", 60, "bjerge", "Historisk by ved Alperne, museer og vin.", {4800, 5500}, {8500, 10000}, {18000, 22000}},
    {"Lonigo", 70, "landskab", "Kendt for vinruter og historiske villaer.", {4500, 5000}, {8000, 9000}, {15500, 18000}},
    {"Murano", 1.5, "historisk", "Glaskunst og Museo del Vetro på en charmerende ø.", {3000, 3500}, {7000, 8000}, {15000, 18000}},
    {"Burano", 7, "historisk", "Farverig charme og traditionelt håndværk.", {3200, 3700}, {7200, 8200}, {15500, 18500}},
    {"Vicenza", 70, "historisk", "Renæssancearkitektur og UNESCO verdensarv.", {5000, 6000}, {9000, 11000}, {20000, 25000}},
    {"Mestre", 10, "moderne", "Billig overnatning tæt på Venedig.", {3000, 4000}, {6000, 7500}, {12000, 15000}},
    {"Torcello", 10, "historisk", "Spirituel ø med Santa Maria Assunta-kirken.", {3500, 4000}, {7000, 8000}, {14000, 17000}},
    {"Mira", 20, "landskab", "Villaer langs Brenta-kanalen, bl.a. Villa Foscari.", {4500, 5000}, {8500, 9500}, {16000, 20000}},
    {"Dolo", 25, "landskab", "Hyggelig landsby ved Brenta-kanalen med vandmøller.", {4000, 4500}, {8000, 9000}, {15000, 18000}},
    {}
};


#define ANTAL_BYER (sizeof(byer) / sizeof(byer[0]))

// Vis radiusvalg
void vis_radiusvalg(int hoej_saeson) {
    printf("\n--- Vaelg radius ---\n");
    if (hoej_saeson) {
        printf("[1=10-20 km, 2=20-40 km, 3=40-70 km, 4=70-100 km]\n");
    } else {
        printf("[1=5-15 km, 2=15-30 km, 3=30-45 km, 4=45-60 km, 5=60-75 km]\n");
    }
}

// Filtrér efter radius
void filter_radius(float min_radius, float max_radius) {
    printf("\n--- Match med radius (%.1f-%.1f km) ---\n", min_radius, max_radius);
    for (int i = 0; i < ANTAL_BYER; i++) {
        if (byer[i].afstand >= min_radius && byer[i].afstand <= max_radius) {
            printf("By: %s, Afstand: %.1f km\n", byer[i].navn, byer[i].afstand);
        }
    }
}

void vis_budgetsvalg(int hoej_saeson) {
    printf("\n--- Vaelg budget ---\n");
    if (hoej_saeson) {
        printf("[1=5000-9000 kr, 2=9000-18000 kr, 3=18000-20+ kr]\n");
    } else {
        printf("[1=4500-7500 kr, 2=8000-14500 kr, 3=15500-21+ kr]\n");
    }
}

// Filtrér efter budget
void filter_budget(int budget_niveau, int hoej_saeson) {
    printf("\n--- Match med budgetniveau ---\n");
    for (int i = 0; i < ANTAL_BYER; i++) {
        int budget = (budget_niveau == 1) ? byer[i].budget_low[hoej_saeson] :
                     (budget_niveau == 2) ? byer[i].budget_mid[hoej_saeson] :
                     byer[i].budget_high[hoej_saeson];
        printf("By: %s, Budget: %d DKK\n", byer[i].navn, budget);
    }
}

// Vis alle matches samlet
void vis_alle_matches(char *kategori, float min_radius, float max_radius, int budget_niveau, int hoej_saeson) {
    printf("\n--- Samlet liste over alle matches ---\n");
    for (int i = 0; i < ANTAL_BYER; i++) {
        if ((strcmp(byer[i].kategori, kategori) == 0) &&
            (byer[i].afstand >= min_radius && byer[i].afstand <= max_radius)) {
            int budget = (budget_niveau == 1) ? byer[i].budget_low[hoej_saeson] :
                         (budget_niveau == 2) ? byer[i].budget_mid[hoej_saeson] :
                         byer[i].budget_high[hoej_saeson];
            printf("By: %s, Afstand: %.1f km, Budget: %d DKK\n", byer[i].navn, byer[i].afstand, budget);
        }
    }
}
// Funktion til beregning af CO2-udledning
float beregn_co2_udledning(float afstand, int transportmiddel) {
    // CO2-udledning pr. km i gram
    const float CO2_FLY = 285.0;       // Fly
    const float CO2_BUS = 68.0;        // Bus
    const float CO2_ELBIL = 20.0;      // El-bil
    const float CO2_TOG = 14.0;        // Tog

    switch (transportmiddel) {
        case 1: // Fly
            return afstand * CO2_FLY;
        case 2: // Bus
            return afstand * CO2_BUS;
        case 3: // El-bil
            return afstand * CO2_ELBIL;
        case 4: // Tog
            return afstand * CO2_TOG;
        default:
            return -1; // Ugyldigt transportmiddel
    }
}


int main() {
    // Variabler til input
    int hoej_saeson;     // 1 = Høj sæson, 0 = Lav sæson
    float min_radius = 0, max_radius = 0;
    char kategori[20];
    int radius_valg, budget_niveau, klimavenlig;

    // Spørgsmål 1: Periode
    printf("Vil du rejse i hooj season (1) eller udenfor hooj season (2)? ");
    scanf("%d", &hoej_saeson);
    hoej_saeson = (hoej_saeson == 1) ? 1 : 0;

    // Spørgsmål 2: Landskabstype
    printf("Hvilken type oplevelse oonsker du? [1=landskab, 2=historisk, 3=bjerge]: ");
    int valg;
    scanf("%d", &valg);
    if (valg == 1) strcpy(kategori, "landskab");
    else if (valg == 2) strcpy(kategori, "historisk");
    else if (valg == 3) strcpy(kategori, "bjerge");
    else {
        printf("Ugyldigt valg.\n");
        return 1;
    }

    // Spørgsmål 3: Radius
    vis_radiusvalg(hoej_saeson);
    scanf("%d", &radius_valg);
    if (hoej_saeson) {
        if (radius_valg == 1) { min_radius = 10; max_radius = 20; }
        else if (radius_valg == 2) { min_radius = 20; max_radius = 40; }
        else if (radius_valg == 3) { min_radius = 40; max_radius = 70; }
        else if (radius_valg == 4) { min_radius = 70; max_radius = 100; }
        else {
            printf("Ugyldigt valg.\n");
            return 1;
        }
    } else {
        if (radius_valg == 1) { min_radius = 5; max_radius = 15; }
        else if (radius_valg == 2) { min_radius = 15; max_radius = 30; }
        else if (radius_valg == 3) { min_radius = 30; max_radius = 45; }
        else if (radius_valg == 4) { min_radius = 45; max_radius = 60; }
        else if (radius_valg == 5) { min_radius = 60; max_radius = 75; }
        else {
            printf("Ugyldigt valg.\n");
            return 1;
        }
    }

    // Spørgsmål 4: Budget
    printf("Hvad er dit budget (DKK)? [1=budget, 2=mellemklasse, 3=luksus]: ");
    scanf("%d", &budget_niveau);
    if (budget_niveau < 1 || budget_niveau > 3) {
        printf("Ugyldigt budget! Indtast en vaerdi mellem 1 og 3.\n");
        return 1;
    }

    // Filtrer og vis resultater
    filter_radius(min_radius, max_radius);
    filter_budget(budget_niveau, hoej_saeson);
    vis_alle_matches(kategori, min_radius, max_radius, budget_niveau, hoej_saeson);
    printf("\n");
    // Spørgsmål 5: Klima
    void vis_alle_matches(char *kategori, float min_radius, float max_radius, int budget_niveau, int hoej_saeson){
    printf("\n--- Samlet liste over alle matches ---\n");
    for (int i = 0; i < ANTAL_BYER; i++) {
        if ((strcmp(byer[i].kategori, kategori) == 0) &&
            (byer[i].afstand >= min_radius && byer[i].afstand <= max_radius)) {
            int budget = (budget_niveau == 1) ? byer[i].budget_low[hoej_saeson] :
                         (budget_niveau == 2) ? byer[i].budget_mid[hoej_saeson] :
                         byer[i].budget_high[hoej_saeson];
            printf("By: %s, Afstand: %.1f km, Budget: %d DKK\n", byer[i].navn, byer[i].afstand, budget);
            printf("Beskrivelse: %s\n", byer[i].beskrivelse);
        }
    }
}

    

// Spørg brugeren om valg af by
printf("Vaelg en by fra listen ovenfor ved at indtaste dens nummer (1-%lu): ", ANTAL_BYER - 1);
int by_valg;
if (scanf("%d", &by_valg) != 1 || by_valg < 1 || by_valg > ANTAL_BYER - 1) {
    printf("Ugyldigt valg. Proev igen.\n");
    return 1;
}

// Beregn CO2-udledning
float co2_udledning = beregn_co2_udledning(byer[by_valg - 1].afstand, klimavenlig);

if (co2_udledning < 0) {
    printf("Ugyldigt transportmiddel. Beregning kan ikke udføres.\n");
} else {
    printf("Rejse til %s med valgt transportmiddel:\n", byer[by_valg - 1].navn);
    printf("- Afstand: %.1f km\n", byer[by_valg - 1].afstand);
    printf("- CO2-udledning: %.2f gram CO2\n", co2_udledning);
}

// Transportmiddel switch-case
printf("Bemærkning: ");
    printf("At rejse med fly udleder 285 gram Co2 pr. km, pr. passager.\n" );
    printf("Hvis du vælger at flyve til din destination vil det udlede %d gram CO2, pr. passager\n" 'co2udledning');

    printf("At køre der ned med bus udleder 68 gram Co2 pr. km, pr. passager.\n");
    printf("Hvis du vælger at tage bussen til din destination vil det udlede %d gram CO2, pr. passager\n" 'co2udledning');

    printf("At køre der ned med el-bil udleder 20 gram Co2 pr. km, pr. passager.\n");
    printf("Hvis du vælger at køre el-bil til din destination vil det udlede %d gram CO2, pr. passager\n" 'co2udledning');

    printf("At tage toget udleder kun 14 gram Co2 pr. km, pr. passager.\n");
    printf("Hvis du vælger at toget til din destination vil det udlede %d gram CO2, pr. passager\n" 'co2udledning');

    return 0;
}
